#include "vulnerability.h"

Vulnerability::Vulnerability(std::string name, PropValue severity, int id, bool isNew) : SecObject(name, id, isNew)
{
    this->severity = severity;
}

ObjectType Vulnerability::type() const
{
    return vulnerability;
}

std::string Vulnerability::description() const
{
    return _description;
}

PropValue Vulnerability::severity() const
{
    return _severity;
}

std::vector<Asset *> Vulnerability::concerns() const
{
    return _concerns;
}

void Vulnerability::description(std::string description)
{
    _description = description;
    _changed = true;
}

void Vulnerability::severity(PropValue severity)
{
    _severity = severity;
    _changed = true;
}

void Vulnerability::addConcern(Asset *concern)
{
    _concerns.push_back(concern);
}

void Vulnerability::removeConcern(Asset *concern)
{
    for(auto it = _properties.begin(); it != _properties.end(); ++it)
    {
        if((*it) == concern)
        {
            _properties.erase(it);
            break;
        }
    }
    _changed = true;
}
